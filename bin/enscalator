#!/usr/bin/env ruby

require 'enscalator'
require 'trollop'

argv = ARGV.dup
p = Trollop::Parser.new do
  banner "Usage: enscalator [arguments]"

  opt :list_templates, %q{List all available templates}, default: false
  opt :template, %q{Template name}, type: String
  opt :region, %q{AWS Region}, type: String, default: 'us-east-1'
  opt :parameters, %q{Parameters 'Key1=Value1;Key2=Value2'}, type: String
  opt :stack_name, %q{Stack name}, type: String
  opt :create_stack, %q{Create the stack}, default: false
  opt :expand, %q{Print template's JSON}, default: false
  opt :exec_pre_run_hook, %q{Execute pre run hook}, default: false
  opt :exec_post_run_hook, %q{Execute post run hook}, default: false
  opt :capabilities, %q{AWS capabilities}, default: 'CAPABILITY_IAM'

  conflicts :list_templates, :expand, :create_stack
  conflicts :list_templates, :expand, :exec_pre_run_hook
  conflicts :list_templates, :expand, :exec_post_run_hook
end

OPTS = Trollop::with_standard_exception_handling p do
  raise Trollop::HelpNeeded if ARGV.empty?
  p.parse ARGV
end

templates = Enscalator::Templates.constants.map(&:to_s)

if OPTS[:list_templates]
  STDERR.puts "Available templates:"
  STDERR.puts templates.sort
  exit
end

if OPTS[:template] && templates.include?(OPTS[:template])
  # for stack_name use template name as a base and convert it from camelcase to underscore case
  OPTS[:stack_name] ||= OPTS[:template].underscore.gsub(/[_]/,"-")
  Object.const_get("Enscalator::Templates::#{OPTS[:template]}").new(OPTS.merge({ARGV: argv})).exec!
elsif OPTS[:template_given] && !OPTS[:template].empty?
  STDERR.puts %Q{Template "#{OPTS[:template]}" doesn't exist}
elsif OPTS[:template].empty?
  STDERR.puts 'Template name cannot be empty string'
else
  STDERR.puts 'Something terrible happened'
end

